package etc.enum_.basic;

/*
 # 상수를 정의해서 코드를 작성하면 다양한 문제가 발생할 수 있다.
 1. **(가장 중요한 이유)상수의 값 자체는 변경이 불가하겠지만 상수를 받는 객체의 필드 값은 안정적이지 못함. (데이터 타입만 맞으면 상수를 안쓰고 아예 데이터타입만 맞춰서 아무거나 넣을 수 있음)
 즉, 일종의 타입 안정성 때문에 사용하는 것. 아래는 부차적인 이유
 2. 상수는 어느 클래스에서나 선언할 수 있기 때문에 무분별한 상수 선언이 이뤄질 수 있음.(클래스 이름으로 불러와야하는데 여기저기 너저분하면 일관성이 없자나...)
 3. 코드의 가독성 또한 좋지 못하다. (static final을 붙이지 않아도 상수가 되며 깔끔하게 보임)
 
 # enum class를 사용하면 얻는 이득
 1. enum에 정의한 상수 이외의 값을 컴파일 과정에서 막음 -> 타입 안정성 증가
 2. 관련있는 상수끼리 모아놓음 -> 구현 의도를 명확하게 파악 가능.
 3. 코드가 단순해짐 -> 가독성이 좋아짐
 */


public enum Languages {

	// static final 을 붙일 필요 없음: 애초에 상수열거객체임.
	// 상수 선언과 함께 괄호 안에 ("연관시킬 문자")를 놓고 세미콜론 붙이기
	JAVA("자바"),
	PYTHON("파이썬"),
	CPP("c++"),
	JAVASCRIPT("자바스크립트"),
	C("c");
	
	//괄호 내부의 매칭문자를 꺼내기 위해선 getter 메서드가 필요하며 생성자도 필요함
	private final String name; // 괄호 내부의 문자열도 고정시켜서 사용하기 위해 final로 지정. 상수와 연관시킬 문자값을 담을 필드 선언
	public String getName() { // 한글 이름을 얻어내기 위한 메서드 (name이 private 이기 때문에 getter 설정)
		return name;
	}
	
	//외부에서 enum타입의 상수를 사용 시 enum 객체가 생성됨.
	//위에 선언한 방식의 상수와 연관 문자를 전달해서 name필드에 값을 초기화하는 장치.
	private Languages(String name) {
		this.name = name;
	}
	
}
